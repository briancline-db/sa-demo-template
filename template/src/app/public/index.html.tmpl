<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.project_name}} - Databricks Demo Dashboard</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'databricks-red': '#FF3621',
                        'databricks-dark': '#1B3139',
                        'databricks-green': '#00A972',
                        'databricks-orange': '#FFA500',
                        'databricks-blue': '#0073E6',
                    },
                    fontFamily: {
                        sans: ['Inter', 'system-ui', 'sans-serif'],
                    },
                    borderRadius: {
                        'databricks': '8px',
                    }
                }
            }
        }
    </script>
    <style>
        body { font-family: 'Inter', system-ui, sans-serif; }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div id="root">
        <!-- Loading state -->
        <div class="flex items-center justify-center min-h-screen">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-databricks-red"></div>
        </div>
    </div>

    <!-- React and dependencies -->
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/recharts/umd/Recharts.js"></script>
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>

    <!-- Dashboard App -->
    <script type="module">
        const { useState, useEffect } = React;
        const { LineChart, Line, AreaChart, Area, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } = Recharts;
        const { DollarSign, Users, TrendingUp, ShoppingCart, Activity, MessageSquare } = lucide;

        // DatabricksCard Component
        function DatabricksCard({ title, description, value, trend, icon: Icon, className = "" }) {
            return React.createElement('div', {
                className: `bg-white rounded-databricks shadow-lg border-0 p-6 ${className}`
            }, [
                React.createElement('div', {
                    key: 'header',
                    className: 'flex items-center justify-between mb-4'
                }, [
                    React.createElement('h3', {
                        key: 'title',
                        className: 'text-sm font-medium text-gray-600'
                    }, title),
                    Icon && React.createElement('div', {
                        key: 'icon',
                        className: 'h-8 w-8 bg-databricks-red rounded-databricks flex items-center justify-center'
                    }, React.createElement(Icon, { className: 'h-4 w-4 text-white' }))
                ]),
                React.createElement('div', {
                    key: 'value',
                    className: 'text-2xl font-bold text-databricks-dark mb-2'
                }, value),
                description && React.createElement('p', {
                    key: 'description',
                    className: 'text-sm text-gray-500 mb-2'
                }, description),
                trend && React.createElement('div', {
                    key: 'trend',
                    className: `text-sm flex items-center ${
                        trend.direction === 'up' ? 'text-databricks-green' : 
                        trend.direction === 'down' ? 'text-red-500' : 'text-gray-500'
                    }`
                }, [
                    trend.direction === 'up' && '↗ ',
                    trend.direction === 'down' && '↘ ',
                    trend.value
                ])
            ]);
        }

        // DatabricksChart Component
        function DatabricksChart({ type = 'line', data = [], xKey, yKeys = [], title, className = "", height = 400 }) {
            const DATABRICKS_COLORS = ['#FF3621', '#00A972', '#0073E6', '#FFA500', '#8B5CF6', '#06B6D4'];
            
            const ChartComponent = {
                line: LineChart,
                area: AreaChart,
                bar: BarChart
            }[type];

            const CustomTooltip = ({ active, payload, label }) => {
                if (active && payload && payload.length) {
                    return React.createElement('div', {
                        className: 'bg-white p-3 border border-gray-200 rounded-databricks shadow-lg'
                    }, [
                        React.createElement('p', {
                            key: 'label',
                            className: 'text-sm font-medium text-databricks-dark'
                        }, label),
                        ...payload.map((entry, index) => React.createElement('p', {
                            key: index,
                            className: 'text-sm',
                            style: { color: entry.color }
                        }, `${entry.name}: ${entry.value.toLocaleString()}`))
                    ]);
                }
                return null;
            };

            return React.createElement('div', {
                className: `bg-white rounded-databricks p-6 shadow-lg ${className}`
            }, [
                title && React.createElement('h3', {
                    key: 'title',
                    className: 'text-xl font-semibold text-databricks-dark mb-4'
                }, title),
                React.createElement(ResponsiveContainer, {
                    key: 'chart',
                    width: '100%',
                    height: height
                }, React.createElement(ChartComponent, {
                    data: data
                }, [
                    React.createElement(CartesianGrid, {
                        key: 'grid',
                        strokeDasharray: '3 3',
                        stroke: '#E9ECEF'
                    }),
                    React.createElement(XAxis, {
                        key: 'xaxis',
                        dataKey: xKey,
                        stroke: '#6C757D',
                        fontSize: 12,
                        fontFamily: 'Inter'
                    }),
                    React.createElement(YAxis, {
                        key: 'yaxis',
                        stroke: '#6C757D',
                        fontSize: 12,
                        fontFamily: 'Inter'
                    }),
                    React.createElement(Tooltip, {
                        key: 'tooltip',
                        content: React.createElement(CustomTooltip)
                    }),
                    React.createElement(Legend, { key: 'legend' }),
                    ...yKeys.map((key, index) => {
                        const color = DATABRICKS_COLORS[index % DATABRICKS_COLORS.length];
                        const commonProps = {
                            key,
                            dataKey: key,
                            stroke: color,
                            strokeWidth: 2,
                            name: key.charAt(0).toUpperCase() + key.slice(1)
                        };

                        if (type === 'area') {
                            return React.createElement(Area, {
                                ...commonProps,
                                fill: color,
                                fillOpacity: 0.1
                            });
                        } else if (type === 'bar') {
                            return React.createElement(Bar, {
                                ...commonProps,
                                fill: color
                            });
                        } else {
                            return React.createElement(Line, {
                                ...commonProps,
                                dot: { fill: color, strokeWidth: 2 }
                            });
                        }
                    })
                ]))
            ]);
        }

        // Main Dashboard Component
        function Dashboard() {
            const [kpis, setKpis] = useState(null);
            const [trends, setTrends] = useState([]);
            const [segments, setSegments] = useState([]);
            const [loading, setLoading] = useState(true);

            useEffect(() => {
                const fetchData = async () => {
                    try {
                        const [kpisRes, trendsRes, segmentsRes] = await Promise.all([
                            fetch('/api/kpis'),
                            fetch('/api/trends'),
                            fetch('/api/segments')
                        ]);

                        const kpisData = await kpisRes.json();
                        const trendsData = await trendsRes.json();
                        const segmentsData = await segmentsRes.json();

                        setKpis(kpisData);
                        setTrends(trendsData);
                        setSegments(segmentsData);
                    } catch (error) {
                        console.error('Failed to fetch data:', error);
                    } finally {
                        setLoading(false);
                    }
                };

                fetchData();
            }, []);

            if (loading) {
                return React.createElement('div', {
                    className: 'flex items-center justify-center min-h-screen'
                }, React.createElement('div', {
                    className: 'animate-spin rounded-full h-12 w-12 border-b-2 border-databricks-red'
                }));
            }

            return React.createElement('div', { className: 'min-h-screen bg-gray-50' }, [
                // Header
                React.createElement('header', {
                    key: 'header',
                    className: 'bg-white border-b border-gray-200 px-6 py-4'
                }, React.createElement('div', {
                    className: 'flex items-center justify-between'
                }, [
                    React.createElement('div', {
                        key: 'logo',
                        className: 'flex items-center space-x-4'
                    }, [
                        React.createElement('div', {
                            className: 'h-8 w-8 bg-databricks-red rounded-databricks flex items-center justify-center'
                        }, React.createElement('span', {
                            className: 'text-white font-bold text-sm'
                        }, 'D')),
                        React.createElement('h1', {
                            className: 'text-2xl font-semibold text-databricks-dark'
                        }, '{{.project_name}} Dashboard')
                    ]),
                    React.createElement('div', {
                        key: 'actions',
                        className: 'flex items-center space-x-4'
                    }, [
                        React.createElement('button', {
                            className: 'bg-databricks-red hover:bg-red-700 text-white font-medium rounded-databricks px-4 py-2'
                        }, 'Refresh Data')
                    ])
                ])),

                // Main Content
                React.createElement('main', {
                    key: 'main',
                    className: 'p-6'
                }, [
                    // KPI Grid
                    React.createElement('div', {
                        key: 'kpis',
                        className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8'
                    }, [
                        React.createElement(DatabricksCard, {
                            key: 'revenue',
                            title: 'Total Revenue',
                            value: kpis?.total_revenue?.value || '$0',
                            trend: kpis?.total_revenue?.trend,
                            icon: DollarSign
                        }),
                        React.createElement(DatabricksCard, {
                            key: 'customers',
                            title: 'Total Customers',
                            value: kpis?.total_customers?.value || '0',
                            trend: kpis?.total_customers?.trend,
                            icon: Users
                        }),
                        React.createElement(DatabricksCard, {
                            key: 'aov',
                            title: 'Avg Order Value',
                            value: kpis?.avg_order_value?.value || '$0',
                            trend: kpis?.avg_order_value?.trend,
                            icon: TrendingUp
                        }),
                        React.createElement(DatabricksCard, {
                            key: 'conversion',
                            title: 'Conversion Rate',
                            value: kpis?.conversion_rate?.value || '0%',
                            trend: kpis?.conversion_rate?.trend,
                            icon: Activity
                        })
                    ]),

                    // Charts Grid
                    React.createElement('div', {
                        key: 'charts',
                        className: 'grid grid-cols-1 lg:grid-cols-2 gap-6'
                    }, [
                        React.createElement(DatabricksChart, {
                            key: 'trends',
                            type: 'line',
                            data: trends,
                            xKey: 'month',
                            yKeys: ['revenue', 'customers'],
                            title: 'Revenue & Customer Trends',
                            height: 400
                        }),
                        React.createElement(DatabricksChart, {
                            key: 'segments',
                            type: 'bar',
                            data: segments,
                            xKey: 'segment',
                            yKeys: ['customers'],
                            title: 'Customers by Segment',
                            height: 400
                        })
                    ])
                ])
            ]);
        }

        // Render the dashboard
        ReactDOM.render(
            React.createElement(Dashboard),
            document.getElementById('root')
        );
    </script>
</body>
</html> 