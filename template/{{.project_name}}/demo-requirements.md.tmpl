# {{.project_name}} - Demo Requirements & AI Instructions

## 🎯 Demo Overview
**Project:** {{.project_name}}
**Industry:** {{.industry}}
**Complexity:** {{.complexity}}
**Data Scale:** {{.data_scale}}

## 📋 Detailed Requirements
{{.demo_description}}

## 🎨 Design Requirements
- Professional Databricks branding and design system
- Modern, executive-ready dashboard interface  
- Interactive visualizations with drill-down capabilities
- Responsive design optimized for presentations
- Real-time data updates and live metrics

## 📊 Data & Analytics Requirements
- Industry-appropriate synthetic data for {{.industry}}
- Realistic business scenarios and edge cases
- Scalable data generation ({{.data_scale}} volume)
- Time-series data for trend analysis
- Demographic and behavioral segmentation

{{if eq .complexity "standard"}}
## 🔄 OLTP Requirements
- Real-time transaction processing with Lakebase
- Live dashboard updates from operational data
- CRUD operations for interactive demos
- Data synchronization between OLTP and analytical stores
{{end}}

{{if eq .complexity "advanced"}}
## 🔄 OLTP Requirements  
- Real-time transaction processing with Lakebase
- Live dashboard updates from operational data
- CRUD operations for interactive demos
- Data synchronization between OLTP and analytical stores

## 🤖 AI/LLM Requirements
- Conversational analytics interface
- RAG-enabled question answering about data
- Natural language query capabilities
- Predictive analytics and forecasting
- Automated insights and recommendations
{{end}}

## 🚀 Success Criteria
- **Professional Impact:** Executive-ready presentation quality
- **Business Value:** Clear ROI and actionable insights  
- **Technical Excellence:** Showcases Databricks platform capabilities
- **User Experience:** Intuitive, engaging, and interactive
- **Deployment:** 5-minute setup and deployment process

---

## 🤖 AI IMPLEMENTATION INSTRUCTIONS

**CURSOR AI: READ THIS SECTION FOR IMPLEMENTATION GUIDANCE**

### 🎯 Primary Directive
Implement the demo requirements above using the Databricks Demo Factory template structure. Focus on creating a professional, presentation-ready solution that showcases Databricks capabilities.

### 🏗️ Implementation Strategy

#### 1. Data Generation (Start Here)
- **File:** `src/{{.project_name}}/main.py`
- **Action:** Enhance with {{.industry}}-specific synthetic data
- **Scale:** Generate {{.data_scale}} volume of realistic data
- **Quality:** Ensure referential integrity and business logic

#### 2. API Development
- **File:** `src/app/app.js` (generated from `app.js.tmpl`)
- **Action:** Add industry-specific API endpoints
- **Patterns:** Follow REST conventions, implement proper error handling
- **Data:** Connect to Unity Catalog tables for dashboard consumption

#### 3. Dashboard Components
- **Directory:** `src/app/src/components/`
- **Action:** Build React components using Databricks design system
- **Components:** KPI cards, charts, tables, filters, interactive elements
- **Styling:** Use Tailwind CSS with Databricks brand colors
- **Note:** Both `src/app/components/` (template components) and `src/app/src/components/` (React components) exist

#### 4. Main Dashboard
- **File:** `src/app/src/App.jsx`
- **Action:** Create comprehensive React dashboard layout
- **Features:** Header with branding, KPI grid, visualizations, navigation
- **Interactions:** Filters, drill-downs, real-time updates

{{if or (eq .complexity "standard") (eq .complexity "advanced")}}
#### 5. OLTP Integration
- **Action:** Add Lakebase PostgreSQL integration
- **Features:** Real-time data operations, live dashboard updates
- **Patterns:** Connection pooling, transaction management, sync processes
{{end}}

{{if eq .complexity "advanced"}}
#### 6. LLM Agent Integration
- **Action:** Integrate Mosaic AI Agent Framework
- **Features:** Conversational interface, RAG capabilities, NL queries
- **Implementation:** Chat component, agent API endpoints, context management
{{end}}

### 🎨 Design Guidelines
- Use `DatabricksCard` components for KPIs
- Use `DatabricksChart` components for visualizations
- Follow Databricks color palette: `#FF3621`, `#1B3139`, `#00A972`
- Implement professional typography with Inter font
- Create responsive layouts with proper spacing

### 📊 Industry-Specific Patterns

{{if eq .industry "retail"}}
**Retail Focus:**
- Customer analytics and segmentation
- Product performance and inventory
- Sales trends and forecasting
- Store operations and efficiency
{{end}}

{{if eq .industry "supply_chain"}}
**Supply Chain Focus:**
- Supplier performance and relationships
- Inventory management and optimization
- Logistics and delivery tracking
- Risk assessment and mitigation
{{end}}

{{if eq .industry "finance"}}
**Finance Focus:**
- Portfolio performance and risk
- Customer analytics and lifetime value
- Fraud detection and prevention
- Regulatory compliance and reporting
{{end}}

### 🔧 Technical Standards
- **Error Handling:** Implement comprehensive error boundaries
- **Loading States:** Add skeleton loaders for all async operations
- **Performance:** Optimize bundle size and load times
- **Accessibility:** Use semantic HTML and ARIA labels
- **Security:** Implement proper authentication patterns

### 💡 Enhancement Suggestions
Based on the requirements, consider adding:
- Geographic visualizations for location-based data
- Predictive analytics dashboards
- Anomaly detection alerts
- Export capabilities for reports
- Mobile-responsive design optimizations

### 🚀 Development Approach
1. **Start with MVP:** Basic dashboard with core functionality
2. **Iterate incrementally:** Add features based on complexity level
3. **Test thoroughly:** Ensure all components work smoothly
4. **Optimize performance:** Fast load times and smooth interactions
5. **Polish presentation:** Professional appearance and user experience

Remember: This demo represents Databricks' capabilities to potential customers. Every detail matters for creating a compelling, professional presentation that drives business value. 